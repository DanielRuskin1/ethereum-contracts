contract DataService {
    event NewDataRequest(uint id, bool initialized, string dataUrl, string jsonPath); 
    event GetDataRequest(uint id, bool initialized, string dataurl, string jsonPath, bool lastDataPointInitialized, bool lastDataPointSuccess, string lastDataPointResponse);

    event AddDataPoint(uint dataRequestId, bool success, string response);

    struct DataPoint {
        bool initialized;
        bool success;
        string response; 
    }
    struct DataRequest {
        bool initialized;
        string dataUrl;
        string jsonPath;
        DataPoint[] dataPoints;
    }

    address private organizer;
    DataRequest[] private dataRequests;

    // Create a new lottery with numOfBets supported bets.
    function DataService() {
        organizer = msg.sender;
    }
    
    // Fallback function returns ether
    function() {
        throw;
    }
    
    // Lets the organizer add a new data request
    function addDataRequest(string dataUrl, string jsonPath) {
        // Only let organizer add requests for now
        if(msg.sender != organizer) { throw; }

        // Figure out where to store the new DataRequest (next available element)
        uint nextIndex = dataRequests.length++;
    
        // Init the data request and save it
        DataRequest newDataRequest = dataRequests[nextIndex];
        newDataRequest.initialized = true;
        newDataRequest.dataUrl = dataUrl;
        newDataRequest.jsonPath = jsonPath;

        NewDataRequest(dataRequests.length - 1, newDataRequest.initialized, newDataRequest.dataUrl, newDataRequest.jsonPath);
    }

    // Logs the data request with the requested ID
    function getDataRequest(uint id) {
        DataRequest dataRequest = dataRequests[id];

        bool lastDataPointInitialized = false;
        bool lastDataPointSuccess;
        string memory lastDataPointResponse;
        if(dataRequest.dataPoints.length > 0) { 
            DataPoint lastDataPoint = dataRequest.dataPoints[dataRequest.dataPoints.length - 1];
            lastDataPointInitialized = lastDataPoint.initialized;
            lastDataPointSuccess = lastDataPoint.success;
            lastDataPointResponse = lastDataPoint.response;
        }

        GetDataRequest(id, dataRequest.initialized, dataRequest.dataUrl, dataRequest.jsonPath, lastDataPointInitialized, lastDataPointSuccess, lastDataPointResponse);
    }

    // Lets the organizer add a new data point
    function addDataPoint(uint dataRequestId, bool success, string response) {
        if(msg.sender != organizer) { throw; }
        
        // Get the DataRequest to edit, only allow adding a data point if initialized
        DataRequest dataRequest = dataRequests[dataRequestId];
        if(!dataRequest.initialized) { throw; }

        // Init the new DataPoint and save it
        DataPoint newDataPoint = dataRequest.dataPoints[dataRequest.dataPoints.length++];
        newDataPoint.initialized = true;
        newDataPoint.success = success;
        newDataPoint.response = response;

        AddDataPoint(dataRequestId, success, response);
    }

    // Suicide :(
    function destroy() {
        if(msg.sender != organizer) { throw; }
        
        suicide(organizer);
    }
}
